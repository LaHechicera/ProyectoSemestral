Carpeta bd para establecer conexión con MySQL

1. Se crea el archivo database.js para hacer las consultas en MySQL.
2. Se crea una librería para conectarse a una base de datos desde Node.js, en caso de no funcionar instalar el paquete de datos en la terminal: npm install MySQL.

Archivo script.js

ubicado en la carpeta raíz app para las desiciones enviadas al Backend, capturando la decisión y ubicación de cada hisotira suando fletch().

Carpeta servidor para archivos con la lógica de almacenar datos.
1. Archivo server.js: actúa como servidor para recibir datos desde script.js y guardarlos en MySQL.
2. Archivo registro.js: contiene la lógica para guardar desciciones en la db y crea la tabla del proyecto.

3. instalar para que node.js reciba las decisiones y las guarde en MySQL: npm install express

Otros packetes necesarios para conectar a la base de datos:
npm install express
npm install body-parser
npm install cors


CASOS:

Para crear un archivo especial con la comunicación entre pantallas:


Cuando usas Electron con contextIsolation: true (lo cual es bueno por seguridad), el código dentro de tu HTML no tiene acceso directo a require(), ipcRenderer, ni nada del entorno Node.js.

Por eso, Electron necesita un archivo puente llamado preload.js, que actúa como intermediario entre el proceso renderer (tu HTML) y el main (backend de Electron).


APP./
├── main.js
├── preload.js        //puente entre HTML y backend
├── interacciones.js  //frontend compartido
├── servidor/
│   ├── server.js
│   └── registro.js
├── db/
│   └── database.js
└── Historia1Hombre.html	//Carpeta con las secuencia de la historia humano
├── usuario.html   	//registra usuario
├── escoger.html		//Selección tipo personaje
└── db_local.js		//Almacena al usuario sin conexión a la base de datos
└── otros.json
└── otros.html
└── otros.css
